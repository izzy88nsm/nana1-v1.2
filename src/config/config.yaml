# config.yaml
# Application Configuration v2.0
# Documentation: https://example.com/config-docs

version: "2.1.0"
environment: "dev"  # dev|staging|production

# ------ Core System Configuration ------
core:
  instance_id: "nana-controller-01"
  timezone: "UTC"  # IANA timezone format
  max_threads: 8    # 1-32 (production recommendation: 16)
  cache_size: 65536  # in bytes (max 1MB)
  api_timeout: 30.0  # seconds
  circuit_breaker:
    max_errors: 5
    reset_timeout: 300  # seconds

# ------ Trading Bot Configurations ------
bots:
  - name: "arbitrage_bot_01"
    enabled: true
    mode: "paper"  # paper|live
    exchange: "binance"  # Supported exchanges: binance, kraken, coinbase
    markets:
      - "BTC/USDT"  # BASE/QUOTE format
      - "ETH/USDT"
    cooldown: 60  # seconds (0-3600)
    
    # Strategy Configuration
    strategies:
      - name: "basic_arbitrage"
        type: "arbitrage"
        parameters:
          spread_threshold: 0.3  # percentage
          max_volume: 100        # in quote currency
          allowed_exchanges: ["binance", "kraken"]
          latency_threshold: 500  # ms

    # Market Data Configuration
    market_data:
      real_time: true
      sources:
        - type: "rest"
          endpoint: "https://api.binance.com"
          poll_interval: 5  # seconds
        - type: "websocket"
          endpoint: "wss://stream.binance.com:9443"
      candle_intervals: ["5m", "15m"]
      depth: 20  # order book depth

    # Execution Parameters
    execution:
      dry_run: true
      order_types: ["limit", "market"]
      rate_limits:
        max_orders_per_minute: 30
        max_order_value: 1000.0  # USD
      slippage_tolerance: 0.1  # percentage
      reconciliation_interval: 300  # seconds

    # Risk Management
    risk_parameters:
      portfolio_risk:
        max_drawdown: 5.0  # percentage
        daily_loss_limit: 2.0
      position_sizing:
        max_position: 0.5  # percentage of portfolio
        leverage: 1.0
      stop_loss:
        enabled: true
        trailing: false
        threshold: 2.0  # percentage
      take_profit:
        enabled: true
        threshold: 5.0  # percentage

    # Monitoring & Alerting
    monitoring:
      healthchecks:
        - endpoint: "/health"
          interval: 60
      alerts:
        email: "trading-alerts@example.com"
        slack_webhook: "ENCRYPTED:slack_webhook"

# ------ Strategy Registry ------
strategies:
  basic_arbitrage:
    module: "strategies.arbitrage"
    class_name: "BasicArbitrage"
    version: "1.2.0"
    config_schema: "schemas/arbitrage_v2.json"
    dependencies:
      - "numpy>=1.21.0"
      - "pandas>=1.3.0"
    parameters:
      spread_threshold: 0.3
      max_volume: 100
      allowed_timeframes: ["5m", "15m"]

# ------ Security Configuration ------
security:
  encryption:
    enabled: false
    algorithm: "Fernet-256"
    key_rotation: 30  # days
    key_sources:
      - vault: true
      - env: false
    key_path: "secrets/prod.key"  # For local development only

  vault:
    enabled: false
    url: "https://vault.example.com"
    auth_method: "token"  # token|approle
    secrets_path: "trading-app/secrets"
    token: "ENCRYPTED:vault_token"  # Use environment variable in production
    role_id: ""  # For Approle auth
    secret_id: ""

  secrets:
    rotation_interval: 86400  # seconds
    providers:
      - name: "binance"
        api_key: "ENCRYPTED:binance_api_key"
        api_secret: "ENCRYPTED:binance_api_secret"
      - name: "sentry"
        dsn: "ENCRYPTED:sentry_dsn"

# ------ Observability ------
observability:
  metrics:
    prometheus:
      enabled: true
      port: 9090
      endpoints:
        - "/metrics"
        - "/system-metrics"
      retention: 15m
    
    datadog:
      enabled: false
      api_key: "ENCRYPTED:datadog_api_key"
      tags:
        environment: "dev"
        region: "us-west"
    
    health:
      port: 8080
      endpoints:
        liveness: "/live"
        readiness: "/ready"

  logging:
    main:
      level: "INFO"  # DEBUG|INFO|WARNING|ERROR
      format: "json"
      rotation:
        size: "10MB"
        retention: "7d"
        compression: "gz"
    
    audit:
      enabled: true
      path: "/var/log/trading-audit.log"
      retention: "30d"
    
    sentry:
      enabled: false
      dsn: "ENCRYPTED:sentry_dsn"
      traces_sample_rate: 0.1

# ------ Performance Optimization ------
performance:
  cache:
    strategy: "LRU"
    ttl: 300  # seconds
    max_size: 1_000_000  # items
    
  database:
    connection_pool:
      min: 5
      max: 20
      timeout: 30
    
  network:
    keepalive: 60
    retries: 3
    timeout: 10.0

# ------ Compliance ------
compliance:
  data_retention:
    trades: 365  # days
    logs: 90
    metrics: 30
  
  gdpr:
    enabled: false
    user_data_encryption: true
    right_to_be_forgotten: true
